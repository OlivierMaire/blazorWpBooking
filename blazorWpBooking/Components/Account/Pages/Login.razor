@page "/Account/Login"

@* @rendermode InteractiveServer *@


@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using blazorWpBooking.Data
@inject IHttpContextAccessor HttpContextAccessor


@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


@inject ILocalStorageService _localStorageService


@inject IAuthenticationService _authenticationService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject blazorWpBooking.Components.Account.CircuitTokenStore TokenStore

@inject WordPressAuthentication WordPressAuth

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm EditContext="editContext" method="post" OnSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control"
                        autocomplete="username webauthn" aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control"
                        autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <hr />
                @* <div class="d-flex flex-column">
                    <span class="text-secondary mx-auto mt-2">OR</span>
                    <PasskeySubmit Operation="PasskeyOperation.Request" Name="Input.Passkey" EmailName="Input.Email"
                        class="btn btn-link mx-auto">Log in with a passkey</PasskeySubmit>
                </div> *@
                <hr />
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a
                            href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register
                            as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    @* <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@
</div>

@code {
    private string? errorMessage;
    private EditContext editContext = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        editContext = new EditContext(Input);

        @* if (HttpMethods.IsGet(HttpContext.Request.Method)) *@
        {
            // Clear the existing external cookie to ensure a clean login process
            @* await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme); *@
        }
    }

    public async Task LoginUser()
    {
        if (!string.IsNullOrEmpty(Input.Passkey?.Error))
        {
            errorMessage = $"Error: {Input.Passkey.Error}";
            return;
        }

        SignInResult result;
        TokenResponse? token = null;

        // If doing a password sign-in, validate the form.
        if (!editContext.Validate())
        {
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        (result, token) = await WordPressAuth.ValidateUserAsync(Input.Email, Input.Password);
        @* result = null; //await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false); *@


        if (result.Succeeded)
        {
            // store token client-side for client requests
            @* await _localStorageService.SetItemAsync("token", token); *@
            @* ((WordPressRevalidatingAuthenticationStateProvider)_authenticationStateProvider).AuthenticateUser(token!); *@
            // store token server-side for this circuit and update AuthenticationState
            TokenStore.SetToken(token!);
            ((WordPressRevalidatingAuthenticationStateProvider)_authenticationStateProvider).AuthenticateUser(token!);


            // create cookie-based principal and sign in
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token.Token);
            var identity = new ClaimsIdentity(jwt.Claims, CookieAuthenticationDefaults.AuthenticationScheme);
            identity.AddClaim(new Claim(ClaimTypes.Name, token.UserDisplayName ?? ""));
            identity.AddClaim(new Claim(ClaimTypes.Email, token.UserEmail ?? ""));
            var principal = new ClaimsPrincipal(identity);

            await HttpContextAccessor.HttpContext!.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, new
            AuthenticationProperties
            { IsPersistent = Input.RememberMe });


            Logger.LogInformation("User logged in.");

            RedirectManager.RedirectTo("Account/AfterAuth", new() { ["returnUrl"] = ReturnUrl, ["token"] = token.Token });

            @* RedirectManager.RedirectTo(ReturnUrl); *@
        }
        @* else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        } *@
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    @* // Example logout method
    public async Task LogoutUser()
    {
        // remove client token
        await _localStorageService.RemoveItemAsync("token");

        // clear circuit token and notify
        TokenStore.Clear();
        ((WordPressRevalidatingAuthenticationStateProvider)_authenticationStateProvider).MarkUserLoggedOut();

        NavigationManager.NavigateTo("/Account/Login", true);



         await _localStorageService.RemoveItemAsync("token");
TokenStore.Clear();
((WordPressRevalidatingAuthenticationStateProvider)AuthProvider).MarkUserLoggedOut();
await HttpContextAccessor.HttpContext!.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
NavigationManager.NavigateTo("/Account/Login", true); 
    } *@

    private sealed class InputModel
    {
        [Required]
        @* [EmailAddress] *@
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }

        public PasskeyInputModel? Passkey { get; set; }
    }
}
